import json
import unittest
import pytest
from http import HTTPStatus
from project import db, create_app
from config import Testing
from flask import request

food_products = json.load(open('sample_food_products.json', 'r'))
textile_products = json.load(open('sample_textile_products.json', 'r'))
url = "http://127.0.0.1:5000/products/"
food_headers = {"X-API-KEY": "food"}
textile_headers = {"X-API-KEY": "textile"}

@pytest.yield_fixture(scope="module")
def app():
    app = create_app(config=Testing)
    return app

@pytest.fixture(scope="module")
def client(app):
    client = app.test_client()
    return client

@pytest.fixture(scope='function', autouse=True)
def setup_db(app):
    with app.app_context(): # Called before each test
        db.create_all()
    yield
    with app.app_context(): # Called after each test
        db.drop_all()
        db.session.remove()

def test_get_none(client):
    response = client.get(url, headers=food_headers)
    assert response.status_code == HTTPStatus.OK

def test_get_food(client):
    response = client.get(url, headers=food_headers)
    assert response.status_code == HTTPStatus.OK

def test_get_textile(client):
    response = client.get(url, headers=textile_headers)
    assert response.status_code == HTTPStatus.OK

def test_post_none_food(client):
    data = {}
    response = client.post(url, data=json.dumps(data), headers=food_headers)
    assert response.status_code == HTTPStatus.BAD_REQUEST

def test_post_none_textile(client):
    data = {}
    response = client.post(url, data=json.dumps(data), headers=textile_headers)
    assert response.status_code == HTTPStatus.BAD_REQUEST

def test_post_incorrect_api_key(client):
    headers = {'X-API-KEY': 'qwerty'}
    data = food_products[0]
    data.pop("id", None) # Remove id key (auto generated by DB)
    response = client.post(url, data=json.dumps(data), headers=headers)
    assert response.status_code == HTTPStatus.BAD_REQUEST

def test_post_food(client):
    data = food_products[0]
    data.pop("id", None)
    response = client.post(url, data=json.dumps(data), headers=food_headers)
    assert response.status_code == HTTPStatus.CREATED

def test_post_textile(client):
    data = textile_products[0]
    data.pop("id", None)
    response = client.post(url, data=json.dumps(data), headers=textile_headers)
    assert response.status_code == HTTPStatus.CREATED
