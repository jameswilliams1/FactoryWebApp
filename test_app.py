import unittest
import requests
import json
from http import HTTPStatus
from app import app, food_products, textile_products


url = "http://localhost:5000/products"
food_headers = {"X-API-KEY": "food"}
textile_headers = {"X-API-KEY": "textiles"}

class TestCase(unittest.TestCase):

    def setUp(self):
        app.config["TESTING"] = True
        self.app = app.test_client()

    def test_get_food(self): # GET should return all food products in DB
        response = requests.get(url, headers=food_headers).json()
        self.assertEqual(response, food_products)

    def test_post_food(self): # Check for successful food product add
        data = food_products[0]
        data.pop("id", None) # Remove id key (auto generated by DB)
        response = requests.post(url, data=data, headers=food_headers).json()
        self.assertEqual(response.status_code, HTTPStatus.CREATED)

    def test_post_none_food(self): # POST with no JSON data should give BAD_REQUEST
        data = {}
        response = requests.post(url, data=data, headers=food_headers).json()
        self.assertEqual(response.status_code, HTTPStatus.BAD_REQUEST)

    def test_get_textile(self): # GET should return all textile products in DB
        response = requests.get(url, headers=textile_headers).json()
        self.assertEqual(response, textile_products)

    def test_post_textile(self): # Check for successful textile product add
        data = textile_products[0]
        data.pop("id", None) # Remove id key (auto generated by DB)
        response = requests.post(url, data=data, headers=textile_headers).json()
        self.assertEqual(response.status_code, HTTPStatus.CREATED)

    def test_post_none_textile(self): # POST with no JSON data should give BAD_REQUEST
        data = {}
        response = requests.post(url, data=data, headers=textile_headers).json()
        self.assertEqual(response.status_code, HTTPStatus.BAD_REQUEST)


if __name__ == "__main__":
    unittest.main()
